apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: 'java-library'
apply plugin: 'io.spring.dependency-management'


buildscript {
    ext {
        springBootVersion = '2.2.5.RELEASE'
        camundaVersion = '7.12.0'
        camundaSpringBootVersion = '3.4.1'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

repositories {
    mavenCentral()
}

ext {
    ext['spring-security.version'] = '5.3.4.RELEASE'
    mapstructVersion = '1.3.0.Final'
}

dependencyManagement {
    imports {
        mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
    }
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
compileJava {
    options.encoding = 'UTF-8'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

javadoc {
    options.encoding = 'UTF-8'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'sources'
    from javadoc.destinationDir
}

configurations.all {
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
}

dependencies {

    implementation("org.springframework.boot:spring-boot-starter-jetty")

    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-web-services")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("org.mapstruct:mapstruct:${mapstructVersion}")
    implementation("org.mapstruct:mapstruct-processor:${mapstructVersion}")

    testCompile("org.springframework.boot:spring-boot-starter-test:")

    // Camunda Process Engine
    implementation platform('org.camunda.bpm:camunda-bom:' + camundaVersion)
    implementation group: 'org.camunda.bpm', name: 'camunda-engine'
    implementation group: 'org.camunda.bpm', name: 'camunda-engine-spring'

    implementation group: 'org.camunda.bpm.springboot', name: 'camunda-bpm-spring-boot-starter', version: camundaSpringBootVersion
    implementation group: 'org.camunda.bpm.springboot', name: 'camunda-bpm-spring-boot-starter-webapp', version: camundaSpringBootVersion
    implementation group: 'org.camunda.bpm.springboot', name: 'camunda-bpm-spring-boot-starter-rest', version: camundaSpringBootVersion

    implementation group: 'org.camunda.bpm', name: 'camunda-engine-plugin-spin'
    implementation group: 'org.camunda.spin', name: 'camunda-spin-core', version: '1.8.0'
    implementation group: 'org.camunda.spin', name: 'camunda-spin-dataformat-json-jackson'

    // Database
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc'
    implementation group: 'org.springframework', name: 'spring-tx'
    implementation group: 'com.h2database', name: 'h2', version: '1.4.196'

    // Freemarker
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-freemarker', version: springBootVersion

    testImplementation("org.springframework.boot:spring-boot-starter-actuator")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.security:spring-security-test")
    testImplementation("io.jsonwebtoken:jjwt:0.9.1")
    testImplementation('javax.xml.bind:jaxb-api:2.3.1')
    testImplementation('org.glassfish.jaxb:jaxb-runtime:2.3.2')
    testImplementation('com.squareup.okhttp3:mockwebserver:4.7.0')
    testImplementation('com.squareup.okhttp3:okhttp:4.7.0')

}


/*
    Semantic Release Configuration
 */
//semanticRelease {
//    repo {
//        ghToken = System.getenv('GITHUB_TOKEN') ?: ''
//        useGhEnterprise System.getenv('GITHUB_URL') ?: ''
//        releaseAsset file("${jar.archivePath}"), label: 'JAR'
//    }
//}