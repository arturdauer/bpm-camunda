apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: 'java-library'
apply plugin: 'no.nils.wsdl2java'
apply plugin: 'org.hidetake.swagger.generator'
apply plugin: 'io.spring.dependency-management'


buildscript {
    ext {
        springBootVersion = '2.2.5.RELEASE'
        camundaVersion = '7.12.0'
        camundaSpringBootVersion = '3.4.4'
        apacheCxfVersion = '3.3.6'
        camundaMockito = '4.12.0'
    }

    repositories {
        mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "no.nils:wsdl2java:0.10"
        classpath "org.apache.cxf:cxf-tools-wsdlto-frontend-jaxws:3.3.3"
        classpath "com.sun.xml.ws:jaxws-ri:2.3.2"
        classpath 'gradle.plugin.org.hidetake:gradle-swagger-generator-plugin:2.18.1'
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

ext {
    projectDirName = 'bpm-camunda'
    ext['spring-security.version'] = '5.3.4.RELEASE'
    mapstructVersion = '1.3.0.Final'
}

dependencyManagement {
    imports {
        mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
    }
}

configurations.all {
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
}

dependencies {

    implementation("de.home.logging:logging-ws:1.1")
    implementation("org.springframework.boot:spring-boot-starter-jetty")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-web-services")

    // Swagger core
    implementation("io.swagger:swagger-annotations:1.6.0")
    implementation("io.swagger:swagger-core:1.6.0")
    implementation("org.openapitools:jackson-databind-nullable:0.2.1")
    swaggerCodegen("io.swagger.codegen.v3:swagger-codegen-cli:3.0.18")

    //JDK 11 Support fuer JAXB und JAXSWS
    implementation("javax.xml.bind:jaxb-api")
    implementation group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.2.5'
    implementation group: 'com.sun.xml.bind', name: 'jaxb-ri', version: '2.3.3'

    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("org.mapstruct:mapstruct:${mapstructVersion}")
    implementation("org.mapstruct:mapstruct-processor:${mapstructVersion}")

    // jax-ws / cxf
    implementation("org.apache.cxf:cxf-spring-boot-starter-jaxws:${apacheCxfVersion}")
    implementation("org.apache.cxf:cxf-core:${apacheCxfVersion}")
    implementation("org.apache.cxf:cxf-rt-features-logging:${apacheCxfVersion}")
    implementation("com.sun.xml.ws:jaxws-ri:2.3.2")
    implementation("com.sun.activation:javax.activation:1.2.0")

    testCompile("org.springframework.boot:spring-boot-starter-test")

    // Camunda Process Engine
    implementation platform('org.camunda.bpm:camunda-bom:' + camundaVersion)
    implementation group: 'org.camunda.bpm', name: 'camunda-engine'
    implementation group: 'org.camunda.bpm', name: 'camunda-engine-spring'

    implementation group: 'org.camunda.bpm.springboot', name: 'camunda-bpm-spring-boot-starter', version: camundaSpringBootVersion
    implementation group: 'org.camunda.bpm.springboot', name: 'camunda-bpm-spring-boot-starter-webapp', version: camundaSpringBootVersion
    implementation group: 'org.camunda.bpm.springboot', name: 'camunda-bpm-spring-boot-starter-rest', version: camundaSpringBootVersion

    implementation group: 'org.camunda.bpm', name: 'camunda-engine-plugin-spin'
    implementation group: 'org.camunda.spin', name: 'camunda-spin-core', version: '1.8.0'
    implementation group: 'org.camunda.spin', name: 'camunda-spin-dataformat-json-jackson'

    // Database
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc'
    implementation group: 'org.springframework', name: 'spring-tx'
    implementation group: 'com.h2database', name: 'h2', version: '1.4.196'

    // Freemarker
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-freemarker', version: springBootVersion

    testImplementation("org.springframework.boot:spring-boot-starter-actuator")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.security:spring-security-test")
    testImplementation("io.jsonwebtoken:jjwt:0.9.1")
    testImplementation('javax.xml.bind:jaxb-api:2.3.1')
    testImplementation('org.glassfish.jaxb:jaxb-runtime:2.3.2')
    testImplementation('com.squareup.okhttp3:mockwebserver:4.7.0')
    testImplementation('com.squareup.okhttp3:okhttp:4.7.0')

    //camunda
    testImplementation(group: 'org.camunda.bpm.springboot', name: 'camunda-bpm-spring-boot-starter-test', version: camundaSpringBootVersion)
    testImplementation(group: 'org.camunda.bpm.extension.mockito', name: 'camunda-bpm-mockito', version: camundaMockito)
    testImplementation(group: 'org.camunda.bpm.extension', name: 'camunda-bpm-process-test-coverage', version: '0.3.2')

    implementation 'junit:junit:4.12'

}

idea {
    module {
        sourceDirs += file("${project.buildDir}/generated/source/apt/main")
        generatedSourceDirs += file("${project.buildDir}/generated/source/apt/main")
    }
}

wsdl2java {
    encoding = 'utf-8'
    wsdlsToGenerate = [
            ['-p', 'de.hello.bpm.account.model', '-autoNameResolution', "$projectDir/src/main/resources/soap/accountService/wsdl/Accounts.wsdl"]
    ]
    generatedWsdlDir = file("${project.buildDir}/generated/source/apt/main")
    wsdlDir = file("${project.projectDir}/src/main/resources/soap/accountService/wsdl")
}

compileJava.dependsOn('generateSwaggerCode')
ideaModule.dependsOn generateSwaggerCode

sourceSets {
    main {
        java {
            srcDirs "${project.buildDir}/generated/mitarbeiteraendern/swagger/src/main"
        }
    }
    test {
        java {
            srcDirs "${project.buildDir}/generated/mitarbeiteraendern/swagger/src/main"
        }
    }
}

swaggerSources {
    mitarbeiteraendern {
        code {
            inputFile = file('src/main/resources/rest/swagger/backend/hello-mitarbeiter-aendern-api-v1.yaml')
            language = 'spring'
            components = [models: true]
            configFile = file('src/main/resources/rest/swagger/backend/hello-mitarbeiter-aendern-api-config.json')
            outputDir = file('build/generated/mitarbeiteraendern/swagger')
        }
    }
}

/*
    Semantic Release Configuration
 */
//semanticRelease {
//    repo {
//        ghToken = System.getenv('GITHUB_TOKEN') ?: ''
//        useGhEnterprise System.getenv('GITHUB_URL') ?: ''
//        releaseAsset file("${jar.archivePath}"), label: 'JAR'
//    }
//}